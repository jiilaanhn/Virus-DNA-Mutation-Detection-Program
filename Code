import os
import numpy as np
import tkinter as tk
from tkinter import *
from tkinter import filedialog, messagebox

def needleman_wunsch(sequence_1, sequence_2):
    # Perform the alignment and return the result

    # Create matrices
    main_matrix = np.zeros((len(sequence_1)+1,len(sequence_2)+1))
    match_checker_matrix = np.zeros((len(sequence_1),len(sequence_2)))
    
    # Providing score for match, mismatch and gap penalty
    match_reward = 1
    mismatch_penalty = -1
    gap_penalty = -2

    # Fill the match_checker_matrix to match or mismatch
    for i in range(len(sequence_1)):
        for j in range(len(sequence_2)):
            if sequence_1[i] == sequence_2[j]:
                match_checker_matrix[i][j] = match_reward
            else:
                match_checker_matrix[i][j] = mismatch_penalty
                
    # STEP 1: Initialization (assign gap penalties in the 1st row and column)
    for i in range(1, len(sequence_1)+1):
        # horizontal first
        main_matrix[i][0] = main_matrix[i-1][0] + gap_penalty
    for j in range(1, len(sequence_2)+1):
        # then vertical
        main_matrix[0][j] = main_matrix[0][j-1] + gap_penalty
    
    # STEP 2: Matrix Filling
    for i in range(1,len(sequence_1)+1):
        for j in range(1,len(sequence_2)+1):
            main_matrix[i][j] = max(main_matrix[i-1][j-1] + match_checker_matrix[i-1][j-1],
                                    main_matrix[i-1][j] + gap_penalty,
                                    main_matrix[i][j-1] + gap_penalty)
    
    # STEP 3: Traceback
    # Set the variables
    aligned_1 = ""   
    aligned_2 = ""
    gap_count = 0

    # By using len, we start from the last cell
    ti = len(sequence_1)
    tj = len(sequence_2)

    # Traceback using while loop
    while ti>0 or tj>0: # break when ti/tj is empty
    
        # for diagonal neighbor cell
        if ti>0 and tj>0 and main_matrix[ti][tj] == main_matrix[ti-1][tj-1] + match_checker_matrix[ti-1][tj-1]: # m_c_m for check match/mismatch point
            aligned_1 = sequence_1[ti-1] + aligned_1 # -1 bcs indexing starts from 0
            aligned_2 = sequence_2[tj-1] + aligned_2
            ti -= 1
            tj -= 1
    
        # for left neighbor cell
        elif ti>0 and main_matrix[ti][tj] == main_matrix[ti-1][tj] + gap_penalty:
            aligned_1 = sequence_1[ti-1] + aligned_1
            aligned_2 = "-" + aligned_2
            gap_count += 1
            ti -= 1

        else: # for upper neighbor cell
            aligned_1 = "-" + aligned_1
            aligned_2 = sequence_2[tj-1] + aligned_2
            gap_count += 1
            tj -= 1
            
    # Set the variables
    aligned_seq1, aligned_seq2 = '', ''
    match_line = ''
    count_match = 0
    
    change_maker = ''
    ins_positions = []
    del_positions = []
    mis_positions = []
    
    # Add "|" between matching letters
    # Add change detection symbols to the aligned sequences
    for i, (s1,s2) in enumerate(zip(aligned_1, aligned_2)):    
        if s1 == s2:
            aligned_seq1 += s1
            aligned_seq2 += s2
            match_line += '|'
            count_match += 1
            change_maker += ' '
        else:
            if s1 == '-':
                aligned_seq1 += s1
                aligned_seq2 += s2
                match_line += ' '
                change_maker += 'I' # Insertion
                ins_positions.append(i)
            elif s2 == '-':
                aligned_seq1 += s1
                aligned_seq2 += s2
                match_line += ' '
                change_maker += 'D' # Deletion
                del_positions.append(i)
            else:
                aligned_seq1 += s1
                aligned_seq2 += s2
                match_line += ' '
                change_maker += 'M' # Mismatch
                mis_positions.append(i)    
    
    # alignment score
    alignment_score = main_matrix[-1][-1]
    
    # % homology
    homology = count_match / max(len(sequence_1),len(sequence_2)) * 100
    homology_str = '{:.2f}'.format(homology)

    # % gaps
    gaps = gap_count / max(len(sequence_1),len(sequence_2)) * 100
    gaps_str = '{:.2f}'.format(gaps)
    
    # OUTPUT    
    output = ''
    line_length = 60   # full = 120
    output += '\n'
    
    if gap_count:
        output += f'NW Score = {main_matrix[-1][-1]} | Identities = {count_match}/{max(len(sequence_1),len(sequence_2))} ({homology_str}%) | Gaps = {gap_count}/{max(len(sequence_1),len(sequence_2))} ({gaps_str}%)' + '\n'
    else:
        output += f'NW Score = {main_matrix[-1][-1]} | Identities = {count_match}/{max(len(sequence_1),len(sequence_2))} ({homology_str}%)' + '\n'
    
    for i in range(0, len(aligned_seq1), line_length):
        output += '\n'
        output += aligned_seq1[i:i+line_length] + '\n'
        output += match_line[i:i+line_length] + '\n'
        output += aligned_seq2[i:i+line_length] + '\n'
        output += '\n'
    
    # SUBSTITUTION MUTATIONS
    if mis_positions:
        output += '\n'
        output += 'Substitution Mutation: ' + '\n'
        for pos in mis_positions:
            output += f"Change from {aligned_seq1[pos]} to {aligned_seq2[pos]} at {pos+1}"
            output += '\n'
    
    # INSERTION MUTATIONS
    if ins_positions:
        output += '\n'
        output += 'Insertion Mutations: ' + '\n'
        for pos in ins_positions:
            output += f"Insertion of {aligned_seq2[pos]} at {pos+1}"
            output += '\n'
    
    # DELETION MUTATIONS
    if del_positions:
        output += '\n'
        output += 'Deletion Mutations: ' + '\n'
        for pos in del_positions:
            output += f"Deletion of {aligned_seq1[pos]} at {pos+1}"
            output += '\n'
    
    return output


def read_fasta(filename, start=None, end=None):
    """Reads a FASTA file and returns the sequence"""
    with open(filename) as f:
        # Skip the header line
        f.readline()
        # Join the rest of the lines into a single string
        sequence = "".join(line.strip() for line in f)

    # Extract the sequence within the specified nucleotide range
    if start is not None and end is not None:
        sequence = sequence[start-1:end]
    return sequence
        
def browse_file1():
    filename = filedialog.askopenfilename()
    
    if filename:
        # insert to special entry (text widget)
        input_seq1.delete("1.0",tk.END)  # Clear existing content
        seq1_entry.insert(tk.END,filename)
        
        # tambahkan keterangan file yang dipilih
        file_name = os.path.basename(filename)
        selected_file_label1.config(text=f"{file_name}")
        
        
def browse_file2():
    filename = filedialog.askopenfilename()
    
    if filename:
        # insert to special entry (text widget)
        input_seq2.delete("1.0",tk.END)  # Clear existing content
        seq2_entry.insert(tk.END,filename)
        
        # tambahkan keterangan file yang dipilih
        file_name = os.path.basename(filename)
        selected_file_label2.config(text=f"{file_name}")
        
        
def execute_alignment():
    sequence_1 = ''
    sequence_2 = ''
    
    if input_seq1.get("1.0",tk.END).strip():
        sequence_1 = input_seq1.get("1.0",tk.END).strip()
    elif seq1_entry.get("1.0",tk.END):
        # jalankan read_fasta()
        filename = seq1_entry.get("1.0",tk.END).strip()
        if from_seq1.get():
            start = int(from_seq1.get())
            end = int(to_seq1.get())
        else:
            start = None
            end = None
        sequence_1 = read_fasta(filename, start=start, end=end)
        
    if input_seq2.get("1.0",tk.END).strip():
        sequence_2 = input_seq2.get("1.0",tk.END).strip()
    elif seq2_entry.get("1.0",tk.END):
        # jalankan read_fasta()
        filename = seq2_entry.get("1.0",tk.END).strip()
        if from_seq2.get():
            start = int(from_seq2.get())
            end = int(to_seq2.get())
        else:
            start = None
            end = None
        sequence_2 = read_fasta(filename, start=start, end=end)
       
    if sequence_1 and sequence_2:
        result = needleman_wunsch(sequence_1,sequence_2)
        result_window = tk.Toplevel(root)
        result_window.title("Alignment Result")
        
        # Create a Text widget to display the result
        result_text = tk.Text(result_window,font=('Courier New',10),wrap=tk.WORD)
        # Insert the result into the Text widget
        result_text.insert(tk.END,result)
        # Create a Scrollbar widget and associate it with the Text widget
        scrollbar = tk.Scrollbar(result_window)
        result_text.configure(yscrollcommand=scrollbar.set)
        scrollbar.configure(command=result_text.yview)

        # Pack the Scrollbar and Text widgets
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        result_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        result_window.mainloop()
        
    else:
        messagebox.showerror("Error", "Please enter sequences in the text fields.")

root = tk.Tk()
root.geometry('700x500') #+400+100
root.title('DNA Global Sequence Alignment')
root.configure(bg="#b0e8d5")

# FOR SEQUENCE 1
# input widgets
input_seq1 = Text(root,width=50,height=8,wrap=CHAR)
input_seq1.place(x=20,y=50)
label_seq1 = tk.Label(root,text="Enter The First Sequence",font=('Constantia',10),bg="#b0e8d5")
label_seq1.place(x=17,y=25)
seq1_entry = tk.Text(root)

# sequence range widgets
from_seq1 = Entry(root)
from_seq1.place(x=540,y=60)
label_from1 = tk.Label(root,text="From",font=('Constantia',10),bg="#b0e8d5")
label_from1.place(x=500,y=60)
to_seq1 = Entry(root)
to_seq1.place(x=540,y=100)
label_to1 = tk.Label(root,text="To",font=('Constantia',10),bg="#b0e8d5")
label_to1.place(x=515,y=100)

# browse file widgets
button_file1 = Button(root,text='Select File',command=browse_file1,bg="#d3eee5")
button_file1.place(x=20,y=200)
selected_file_label1 = tk.Label(root,bg="#b0e8d5")
selected_file_label1.place(x=100,y=203)


# FOR SEQUENCE 2
# input widgets
input_seq2 = Text(root,width=50,height=8,wrap=CHAR)
input_seq2.place(x=20,y=275)
label_seq2 = tk.Label(root,text="Enter The Second Sequence",font=('Constantia',10),bg="#b0e8d5")
label_seq2.place(x=17,y=250)
seq2_entry = tk.Text(root)

# sequence range widgets
from_seq2 = Entry(root)
from_seq2.place(x=540,y=285)
label_from2 = tk.Label(root,text="From",font=('Constantia',10),bg="#b0e8d5")
label_from2.place(x=500,y=285)
to_seq2 = Entry(root)
to_seq2.place(x=540,y=325)
label_to2 = tk.Label(root,text="To",font=('Constantia',10),bg="#b0e8d5")
label_to2.place(x=515,y=325)

# browse file widgets
button_file2 = Button(root,text='Select File',command=browse_file2,bg="#d3eee5")
button_file2.place(x=20,y=425)
selected_file_label2 = tk.Label(root,bg="#b0e8d5")
selected_file_label2.place(x=100,y=428)


# EXECUTE BUTTON!
execute_button = Button(root,text='EXECUTE',command=execute_alignment,bg="#d3eee5",
                       height=2,width=15,relief=RAISED,borderwidth=5,font=('Arial Black',10))
execute_button.place(x=500,y=420)


root.mainloop()
